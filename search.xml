<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[linux 管道]]></title>
    <url>%2F2019%2F0616%2F120100.html</url>
    <content type="text"><![CDATA[带你快速了解Linux的管道,其中包括标准输入、标准输出和错误输出 1.标准错误输入(1)标准输入的文件描述符是0,符号是&lt; (2)例子：略,暂时没碰过，碰到再补充吧 2.标准输出(1).标准输出stdout的文件描述符是1，符号&gt; (2).例子：echo 123 &gt;file 3.错误输出(1).错误输出stderr的文件描述符是2，符号2&gt; (2).例子：date -d &quot;dddd&quot; 2&gt; /dev/null 4.常用例子(1). 将标准输入和错误输出同时输出到某一个文件 # date -d &quot;dddd&quot; &gt; /dev/null 2&gt;&amp;1]]></content>
      <categories>
        <category>计算机杂项</category>
        <category>常用命令</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1. 关于超时的排查]]></title>
    <url>%2F2019%2F0622%2F102718.html</url>
    <content type="text"><![CDATA[1.路线1 (1)前端可以设置超时时间, (2)ajax的默认timeout为0，默认是不会超时的 2.路线2 (1)nginx可以认为是一个特别的web服务器,最上层为应用层。 (2)nginx的timeout默认是60s,既维护转发连接的时间 (3)可以设置proxy_read_timeout字段，具体设置如下 (1) 12345678910111213141516http &#123; ## # Basic Settings ## sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; #120 = 120s = 2min proxy_read_timeout 120 ` 3.路线4 (1)Statement Timeout (2) statement timeout用来限制statement的执行时长，timeout的值通过调用JDBC的 java.sql.Statement.setQueryTimeout(int timeout) API进行设置。不过现在开发者已经很少直接在代码中设置，而多是通过框架来进行设置。 (3)这个属于很底层设置了 4.路线5 (1)JDBC的socket timeout (2)JDBC使用socket与数据库连接，数据库并不对应用与数据库间的连接超时进行处理 (3)例如:jdbc:mysql://xxx.xx.xxx.xxx:3306/db_name?socketTimeout=60000 5.路线6 (1)操作系统的socket timeout配置 (2)Linux服务器中将socket timeout设置为了30分钟 5.路线7 (1)mysql主动断开连接的超时时间 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 参考https://blog.csdn.net/zero__007/article/details/51523297]]></content>
      <categories>
        <category>java_web</category>
        <category>10.经验总结</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[proxychains4 安装教程]]></title>
    <url>%2F2019%2F0519%2F192615.html</url>
    <content type="text"><![CDATA[proxychains4是proxychains的升级版本,当proxychains代理报错的时候，可以尝试这个 1. 系统环境ubuntu 16.04 - x64 2. 简单介绍proxychains4是proxychains的升级版本,当proxychains代理报错的时候，可以尝试这个 3. 安装步骤12345678910# git clone https://github.com/rofl0r/proxychains-ng.git# cd proxychains-ng# ./configure --prefix=/usr --sysconfdir=/etc# make# make install# make install-config# vim /etc/proxychains.conf (添加代理服务器)]]></content>
      <categories>
        <category>操作系统</category>
        <category>ubuntu</category>
        <category>常见软件安装</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[lbashdb 安装使用]]></title>
    <url>%2F2019%2F0624%2F222250.html</url>
    <content type="text"><![CDATA[下载地址]]></content>
      <categories>
        <category>操作系统</category>
        <category>ubuntu</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[如何用vscode画时序图]]></title>
    <url>%2F2019%2F0623%2F230016.html</url>
    <content type="text"><![CDATA[用vscode插件画时序图比较方便，速度快如果用不习惯vscode插件，可以在线编辑,有较多主题url : https://www.websequencediagrams.com/ 1.插件名字:VSCode Sequence Diagrams 2.描述:画时序图 3.使用方法: (1)新建文件,格式为seqdiag (2)启动实时预览: 【cmd + shift + p】调出命令模式，选中Show Sequence Diagram Preview 4.常见语法(1)注释,不显示 # (2)同步调用 A-&gt;B: Hello (3)异步调用 A-&gt;&gt;B: Hello (4)回复消息 A--&gt;B: Hello (5)注释，显示 Note left of A: Left note Note right of A: right note Note over A: over note Note over A,B: over both A and B 5.一个简单例子123456789Title: 超时路线前端 -&gt; nginx : 1nginx -&gt; java后台: 2java后台 -&gt; nginx: 3java后台 -&gt; java后台: 4java后台 -&gt; java后台: 5java后台 -&gt; 数据库: 6数据库 -&gt; java后台: 7 截图出的时序图为: 6.楼主疑惑下了插件后不知道怎么修改时序图的主题，如果有人知道麻烦告知一声]]></content>
      <categories>
        <category>工作空间</category>
        <category>工具</category>
        <category>编程工具</category>
        <category>vscode</category>
        <category>插件</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[修改 gitbash配色]]></title>
    <url>%2F2019%2F0616%2F151717.html</url>
    <content type="text"><![CDATA[win10默认的gitbash配色太费眼了所以想更换一个好看的配色，成果如下]]></content>
      <categories>
        <category>java_web</category>
        <category>2.常用软件</category>
        <category>4.版本控制PicGo gitee</category>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[linux 常用命令]]></title>
    <url>%2F2019%2F0623%2F215200.html</url>
    <content type="text"><![CDATA[这里收集了一些常用的linux命令每一个命令我都用过，没用过我不会粘贴进来，不搞虚的 1.命令du12345678910110.描述: (1).disk usage (2).用于显示 目录 大小1.参数: -h: kb -m： mb -s: 总大小 sum2.例子: du /home #显示home及以下目录的容量 du -sh /home #以kb的形式显示home的所占磁盘大小 2.命令df123456780.描述 (1).disk filesystem (2).用于显示Linux系统的 磁盘 利用率1.参数: -h: kb -H Kb2.例子:]]></content>
      <categories>
        <category>操作系统</category>
        <category>ubuntu</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[测试cpu的利用率的升到100%]]></title>
    <url>%2F2019%2F0608%2F203333.html</url>
    <content type="text"><![CDATA[简单的shell语句，让你的cpu利用率飙到100% 1for i in `seq 1 $(cat /proc/cpuinfo |grep "physical id" |wc -l)`; do dd if=/dev/zero of=/dev/null &amp; done 解释: 1.获得CPU的个数,我们将设为N1cat /proc/cpuinfo |grep "physical id" | wc -l 2.生成１到n之间的数字1seq 1 N 3.dd命令,输出到/dev/null, 实际上只占用CPU,没有IO操作1dd if=/dev/zero of=/dev/null]]></content>
      <categories>
        <category>操作系统</category>
        <category>ubuntu</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[shell脚本计算cpu使用率]]></title>
    <url>%2F2019%2F0518%2F155813.html</url>
    <content type="text"><![CDATA[shell脚本 计算 cpu使用率 123456789101112131415161718192021222324252627282930313233343536373839404142#!/bin/sh#脚本功能描述：依据/proc/stat文件获取并计算CPU使用率#CPU时间计算公式：CPU_TIME=user+system+nice+idle+iowait+irq+softirq#CPU使用率计算公式：cpu_usage=[(user_2 +sys_2+nice_2) - (user_1 + sys_1+nice_1)]/(total_2 - total_1)*100#默认时间间隔TIME_INTERVAL=5time=$(date "+%s")LAST_CPU_INFO=$(cat /proc/stat | grep -w cpu | awk '&#123;print $2,$3,$4,$5,$6,$7,$8&#125;')LAST_SYS_IDLE=$(echo $LAST_CPU_INFO | awk '&#123;print $4&#125;')LAST_USER_BUSY=$(echo $LAST_CPU_INFO | awk '&#123;print $1&#125;')LAST_SYS_BUSY=$(echo $LAST_CPU_INFO | awk '&#123;print $3&#125;')LAST_TOTAL_CPU_T=$(echo $LAST_CPU_INFO | awk '&#123;print $1+$2+$3+$4+$5+$6+$7&#125;')LAST_CPU_USAGE=$(echo $LAST_CPU_INFO | awk '&#123;print $1+$2+$3&#125;')sleep $&#123;TIME_INTERVAL&#125;NEXT_CPU_INFO=$(cat /proc/stat | grep -w cpu | awk '&#123;print $2,$3,$4,$5,$6,$7,$8&#125;')NEXT_SYS_IDLE=$(echo $NEXT_CPU_INFO | awk '&#123;print $4&#125;')NEXT_USER_BUSY=$(echo $NEXT_CPU_INFO | awk '&#123;print $1&#125;')NEXT_SYS_BUSY=$(echo $NEXT_CPU_INFO | awk '&#123;print $3&#125;')NEXT_TOTAL_CPU_T=$(echo $NEXT_CPU_INFO | awk '&#123;print $1+$2+$3+$4+$5+$6+$7&#125;')NExT_CPU_USAGE=$(echo $NEXT_CPU_INFO | awk '&#123;print $1+$2+$3&#125;')#系统空闲时间SYSTEM_IDLE=`echo $&#123;NEXT_SYS_IDLE&#125; $&#123;LAST_SYS_IDLE&#125; | awk '&#123;print $1-$2&#125;'`#系统使用时间SYSTEM_BUSY=`echo $&#123;NEXT_SYS_BUSY&#125; $&#123;LAST_SYS_BUSY&#125; | awk '&#123;print $1-$2&#125;'`#用户使用时间USER_BUSY=`echo $&#123;NEXT_USER_BUSY&#125; $&#123;LAST_USER_BUSY&#125; | awk '&#123;print $1-$2&#125;'`#用户+系统+nice时间TOTAL_BUSY=`echo $&#123;NExT_CPU_USAGE&#125; $&#123;LAST_CPU_USAGE&#125; | awk '&#123;print $1-$2&#125;'`#CPU总时间TOTAL_TIME=`echo $&#123;NEXT_TOTAL_CPU_T&#125; $&#123;LAST_TOTAL_CPU_T&#125; | awk '&#123;print $1-$2&#125;'`#CPU总时间百分比CPU_USAGE=`echo $&#123;TOTAL_BUSY&#125; $&#123;TOTAL_TIME&#125; | awk '&#123;printf "%.2f", $1/$2*100&#125;'`#用户时间百分比CPU_USER_USAGE=`echo $&#123;USER_BUSY&#125; $&#123;TOTAL_TIME&#125;|awk '&#123;printf "%.2f", $1/$2*100&#125;'`#系统时间百分比CPU_sys_USAGE=`echo $&#123;SYSTEM_BUSY&#125; $&#123;TOTAL_TIME&#125; |awk '&#123;printf "%.2f", $1/$2*100&#125;'`echo "CPU Usage:$&#123;CPU_USAGE&#125;%" $timeecho "CPU UserUsage:$&#123;CPU_USER_USAGE&#125;%" $timeecho "CPU SysUsage:$&#123;CPU_sys_USAGE&#125;%" $time]]></content>
      <categories>
        <category>操作系统</category>
        <category>ubuntu</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[MySQL 超时参数timeout 理解]]></title>
    <url>%2F2019%2F0622%2F200250.html</url>
    <content type="text"><![CDATA[数据库超时错误的相关字段 当时一脸懵逼,这个参数就像同卵双胞胎一样什么鬼，完全摸不着头脑 0.查看/设置数据超时参数12show global variables like '%timeout%';set global wait_timeout=28800; 1.wait_timeout (1)空闲连接的超时时间,默认是2880s,即是8小时 (2)当jdbc长时间连接mysql服务器，但是有没有做什么操作的时候，当超过wait_timeout参数设置的时间，mysql会主动断开连接，并抛出错误 1234Cause: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: The last packet successfully received from the server was 47,795,922 milliseconds ago. The last packet sent successfully to the server was 47,795,922 milliseconds ago. is longer than the server configured value of &apos;wait_timeout&apos;. You should consider either expiring and/or testing connection validity before use in your application, increasing the server configured values for client timeouts, or using the Connector/J connection property &apos;autoReconnect=true&apos; to avoid this problem. (3)解决办法: 方法一: 在wait_timeout规定的时间内操作一次数据库,任意的sql语句都行，建议select 1 方法二:在jdbc:mysql的url中添加autoReconnect=true, 但前提是mysql的版本是4.x，mysql5以上版本无效 2.interactive_timeout (1)mysql关闭交互式(shell)连接前等待活动的秒数 (2)所谓交互式就是(mysql -uroot -p)进入的那个命令模式3.connect_timeout (1)即连接超时 (2)客户端和MySQL服务器连接一次需求经过6次“握手”方可成功，任意一次“握手”失败都有可能导致连接失败 (3)前3次握手可以简单理解为TCP建立连接所必须的三次握手,后三次后面的三次握手过程超时与connect_timeout有关 4.net_read_timeout 1.mysql服务端从客户端读取（接收）数据时，服务端等待客户端传输完全的超时时间 5.net_write_timeout 1.mysql服务端向客户端写(发送)数据时，服务端等待客户端响应的超时时间 2.但我始终还原不出报错现场，我是这样做的，我用sleep函数模拟mysql运算，sleep设置10s，net_write_timeout设置5s,但程序没有报错，如果有小伙伴能重现报错现场，麻烦告知一声，谢咯 6.总结 ——————–TCP establishing——————– MySQL server —connect_timeout— Client ——————–establishing——————– 在MySQL通讯协议建立连接之后，此时客户端连接的超时受wait_timeout和interactive_timeout参数控制 建立连接后无交互：MySQL server —wait_timeout— Client 建立连接交互后：MySQL server —interactive_timeout— Client 在如果客户端有数据包传输，那么这个数据包的传输超时由net_read_timeout和net_write_timeout参数控制,网络问题或是sql执行时间长都有可能报错 ——————-client与server端有数据传输时——————- client —–&gt;MySQL Server(net_read_timeout) client &lt;—–MySQL Server(net_write_timeout)&nbsp;&nbsp;&nbsp;参考:https://www.cnblogs.com/xiaoboluo768/p/6222862.html]]></content>
      <categories>
        <category>数据库</category>
        <category>mysql</category>
        <category>10.经验总结</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[vscode 常用快捷键]]></title>
    <url>%2F2019%2F0622%2F094628.html</url>
    <content type="text"><![CDATA[【ctrl+p】 #打开文件 【ctrl+alt+x】 #安装程序]]></content>
      <categories>
        <category>工作空间</category>
        <category>工具</category>
        <category>编程工具</category>
        <category>vscode</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo 设置头像]]></title>
    <url>%2F2019%2F0519%2F124312.html</url>
    <content type="text"><![CDATA[设置头像，并将头像设置成原型 1. 设置头像(1)头像存放将图片放入 博客目录/themes/next/source/images 并重命名为 avatar.[格式] (2)编辑主题配置文件_config.yml1vim 博客目录/themes/next/_config.yml 搜索avatar，并更改相应的值 1234# Sidebar Avatar# in theme directory(source/images): /images/avatar.gif# in site directory(source/uploads): /uploads/avatar.gifavatar: /images/avatar.png 2. 头像圆形(1)制作圆形头像(2)设置圆形显示1vim 博客目录/themes/next/source/css/_common/components/sidebar/sidebar-author.styl 替换site-author-img属性123456789101112131415161718.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: site-author-image-border-color; /* start*/ border-radius: 50% webkit-transition: 1.4s all; moz-transition: 1.4s all; ms-transition: 1.4s all; transition: 1.4s all; /* end */&#125;]]></content>
      <categories>
        <category>软件安装及搭建环境</category>
        <category>hexo</category>
        <category>next主题</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[手机刷机基本常识]]></title>
    <url>%2F2019%2F0608%2F184913.html</url>
    <content type="text"><![CDATA[刷机基本常识 1. bootloader BootLoader是在操作系统内核运行之前运行的一段小程序。其实Bootloader就相当于电脑的bios，通过这段小程序，进行硬件初始化，获取内存大小信息等 2. Recovery Recovery模式指的是一种可以对安卓机内部的数据或系统进行修改的模式，也叫工程模式，像是电脑上的小型winPE系统,例如twrp 3. Fastboot 在安卓手机中fastboot是一种比recovery更底层的刷机模式。就是使用USB数据线连接电脑和手机的一种线刷刷机模式，大部分第三方的Recovery刷入，或者救砖均是在Fastboot模式下进入 4. Boot boot意思是手机系统的引导，进入ROM系统先加载boot，每个ROM中均含有boot.img的文件 5 双清（wipe）： wipe即抹去，擦除的意思，为recovery模式下选项之一，它的功能就是清除手机中的各种数据，恢复出厂值。]]></content>
      <categories>
        <category>android</category>
        <category>android调试</category>
        <category>刷机</category>
      </categories>
  </entry>
</search>
